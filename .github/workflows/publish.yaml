name: Publish Android App

on:
  workflow_dispatch:
    inputs:
      force-bump:
        description: 'Force version bump type (patch, minor, major)'
        required: false
        default: ''

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history and tags for versioning

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Android SDK
        run: |
          mkdir -p $HOME/android-sdk/cmdline-tools
          cd $HOME/android-sdk/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip
          mv cmdline-tools latest
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH

      - name: Accept Licenses & Install Build Tools
        run: |
          yes | sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses
          sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-35" "build-tools;35.0.0"

      - name: Add zipalign to PATH and fix ANDROID_HOME
        run: |
          echo "$ANDROID_SDK_ROOT/build-tools/35.0.0" >> $GITHUB_PATH
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/35.0.0:$PATH" >> $GITHUB_ENV

      - name: Verify Android SDK Setup and debug ANDROID_HOME path
        run: |
          sdkmanager --list
          echo "Checking ANDROID_HOME: $ANDROID_HOME"
          ls -la $ANDROID_HOME/build-tools/
          ls -la $ANDROID_HOME/build-tools/35.0.0
          which zipalign || echo "zipalign not found"

      - name: Determine version bump
        id: version
        run: |
          echo "🚀 Starting version bump determination..."
          echo "================================================"
          
          # Get the latest tag, or an empty string if none exist
          echo "📋 Checking for existing tags..."
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$latest_tag" ]; then
            echo "ℹ️  No existing tags found - this will be the first release"
          else
            echo "✅ Latest tag found: $latest_tag"
          fi

          # Determine the commit range for analysis
          if [ -z "$latest_tag" ]; then
            # No tags exist, so analyze all commits for the first release
            commit_range="HEAD"
            # Set a base version for the very first run
            latest_version="0.0.0"
            echo "📊 Analyzing all commits for first release"
            echo "📈 Starting from base version: $latest_version"
          else
            # Analyze commits since the last tag
            commit_range="$latest_tag..HEAD"
            latest_version=${latest_tag#v}
            echo "📊 Analyzing commits since last tag: $latest_tag"
            echo "📈 Current version: $latest_version"
          fi
          echo "🔍 Commit range to analyze: $commit_range"
          
          # Count commits in range
          commit_count=$(git rev-list --count $commit_range)
          echo "📝 Number of commits to analyze: $commit_count"
          
          # Parse semantic version
          echo "🔧 Parsing current version components..."
          major=$(echo "$latest_version" | cut -d. -f1)
          minor=$(echo "$latest_version" | cut -d. -f2)
          patch=$(echo "$latest_version" | cut -d. -f3)
          echo "   📌 Current Major: $major"
          echo "   📌 Current Minor: $minor"
          echo "   📌 Current Patch: $patch"
          
          # Default bump type based on conventional commits
          bump_type="patch"  # Default to patch
          echo "🎯 Default bump type: $bump_type"
          
          # Check for force bump input
          if [ -n "${{ github.event.inputs.force-bump }}" ]; then
            bump_type="${{ github.event.inputs.force-bump }}"
            echo "🔒 Force bump detected: $bump_type (overriding automatic detection)"
          else
            echo "🤖 Analyzing commits for automatic bump type detection..."
            # Get conventional commits from the determined range
            commits=$(git log $commit_range --pretty=format:"%s")
            
            echo "📜 Commits to analyze:"
            echo "$commits" | sed 's/^/   🔸 /'
            
            # Check for features first (minor bump)
            feature_commits=$(echo "$commits" | grep -E "^feat\|^feat(" || true)
            if [ -n "$feature_commits" ]; then
              bump_type="minor"
              echo "✨ Feature commits detected - setting bump type to minor:"
              echo "$feature_commits" | sed 's/^/   ➤ /'
            fi
          
            # Check for breaking changes (major bump) - this overrides feature detection
            breaking_commits=$(echo "$commits" | grep -E "^BREAKING CHANGE\|^feat!:\|^fix!:" || true)
            if [ -n "$breaking_commits" ]; then
              bump_type="major"
              echo "⚠️  Breaking change commits detected - setting bump type to major:"
              echo "$breaking_commits" | sed 's/^/   ➤ /'
            fi
            
            # Check for regular fixes if no features or breaking changes
            if [ "$bump_type" = "patch" ]; then
              fix_commits=$(echo "$commits" | grep -E "^fix(\(.*\))?:" || true)
              if [ -n "$fix_commits" ]; then
                echo "🐛 Fix commits detected - keeping patch bump:"
                echo "$fix_commits" | sed 's/^/   ➤ /'
              fi
            fi
          fi
          
          echo "🎯 Final bump type determined: $bump_type"
          
          # Store original values for logging
          original_major=$major
          original_minor=$minor
          original_patch=$patch
          
          # Increment version based on bump type
          echo "⬆️  Calculating new version..."
          if [ "$bump_type" = "patch" ]; then
            ((patch++))
            echo "   📈 Incrementing patch: $original_patch → $patch"
          elif [ "$bump_type" = "minor" ]; then
            minor=$((minor + 1))
            patch=0
            echo "   📈 Incrementing minor: $original_minor → $minor"
            echo "   🔄 Resetting patch: $original_patch → $patch"
          elif [ "$bump_type" = "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
            echo "   📈 Incrementing major: $original_major → $major"
            echo "   🔄 Resetting minor: $original_minor → $minor"
            echo "   🔄 Resetting patch: $original_patch → $patch"
          fi
          
          # Calculate version code (e.g., 10203 for 1.2.3)
          echo "🔢 Calculating version code..."
          version_code=$((major * 10000 + minor * 100 + patch))
          echo "   📊 Formula: ($major * 10000) + ($minor * 100) + $patch = $version_code"
          
          # Set outputs
          new_version="$major.$minor.$patch"
          echo "💾 Setting environment variables..."
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "VERSION_CODE=$version_code" >> $GITHUB_ENV
          echo "BUMP_TYPE=$bump_type" >> $GITHUB_ENV
          
          echo "================================================"
          echo "🎉 Version bump determination complete!"
          echo "   📦 New version: v$new_version"
          echo "   🔢 Version code: $version_code"
          echo "   📈 Bump type: $bump_type"
          echo "   🔄 Change: v$latest_version → v$new_version"
          echo "================================================"

      - name: Update version in build.gradle
        run: |
          # Find the main build.gradle file
          if [ -f "app/build.gradle.kts" ]; then
            GRADLE_FILE="app/build.gradle.kts"
          elif [ -f "build.gradle.kts" ]; then
            GRADLE_FILE="build.gradle.kts"
          else
            echo "Could not find build.gradle file"
            exit 1
          fi
          
          # For Kotlin DSL
          if grep -q "versionName =" "$GRADLE_FILE"; then
            sed -i "s/versionName = .*/versionName = \"$NEW_VERSION\"/" "$GRADLE_FILE"
            sed -i "s/versionCode = .*/versionCode = $VERSION_CODE/" "$GRADLE_FILE"
          
          # For Groovy DSL
          elif grep -q "versionCode" "$GRADLE_FILE"; then
            sed -i "s/versionCode .*/versionCode $VERSION_CODE/" "$GRADLE_FILE"
            sed -i "s/versionName .*/versionName \"$NEW_VERSION\"/" "$GRADLE_FILE"
          fi
          
          cat "$GRADLE_FILE"

      - name: Generate changelog
        run: |
          # Create F-Droid compatible changelog directory structure
          mkdir -p fastlane/metadata/android/en-US/changelogs
          
          # Determine the range for changelog
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$latest_tag" ]; then
            # First release - use all commits
            git_range="HEAD"
          else
            # Use commits since last tag
            git_range="$latest_tag..HEAD"
          fi
          
          echo "Generating changelog based on commits in $git_range"
          
          changelog_file="fastlane/metadata/android/en-US/changelogs/$VERSION_CODE.txt"
          
          echo "### Release v$NEW_VERSION" > "$changelog_file"
          echo "" >> "$changelog_file"
          
          # Handle Breaking Changes
          breaking_changes=$(git log $git_range --pretty=format:"%s" | grep -E "^BREAKING CHANGE|^feat!|^fix!" | sed -E "s/^(BREAKING CHANGE|feat!|fix!)(\(.*\))?: //" | sed 's/^/- /' || true)
          if [ -n "$breaking_changes" ]; then
            echo "⚠️ BREAKING CHANGES" >> "$changelog_file"
            echo "$breaking_changes" >> "$changelog_file"
            echo "" >> "$changelog_file"
          fi

          # Handle Features
          features=$(git log $git_range --pretty=format:"%s" | grep -E "^feat(\(.*\))?:" | sed -E "s/^feat(\(.*\))?: //" | sed 's/^/- /' || true)
              if [ -n "$features" ]; then
                echo "✨ New Features" >> "$changelog_file"
                echo "$features" >> "$changelog_file"
                echo "" >> "$changelog_file"
              fi
          
          # Handle Bug Fixes
          fixes=$(git log $git_range --pretty=format:"%s" | grep -E "^fix(\(.*\))?:" | sed -E "s/^fix(\(.*\))?: //" | sed 's/^/- /' || true)
              if [ -n "$fixes" ]; then
                echo "🐛 Bug Fixes" >> "$changelog_file"
                echo "$fixes" >> "$changelog_file"
                echo "" >> "$changelog_file"
              fi
          
              # Show the changelog
              cat "$changelog_file"
      
      - name: Decode Keystore
        run: echo "${{ secrets.SIGNING_KEY }}" | base64 --decode > release.keystore

      - name: Build and Sign Release APK
        run: ./gradlew assembleRelease
        env:
          SIGNING_STORE_FILE: "release.keystore"
          SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Rename signed APK
        run: |
          mv app/build/outputs/apk/release/app-release.apk ./app-v${{ env.NEW_VERSION }}.apk

      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add fastlane/metadata/android/en-US/changelogs/$VERSION_CODE.txt
          git add app/build.gradle.kts build.gradle.kts || true
          git commit -m "chore: bump version to v$NEW_VERSION [skip ci]"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin "v$NEW_VERSION"
          git push

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          body_path: fastlane/metadata/android/en-US/changelogs/${{ env.VERSION_CODE }}.txt
          files: ./app-v${{ env.NEW_VERSION }}.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}